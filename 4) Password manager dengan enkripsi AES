import base64
import getpass
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import json

# 🔑 Kunci AES harus 16, 24, atau 32 byte
SECRET_KEY = b'mysecretpassword!'  # contoh (16 byte)

# Fungsi padding (AES butuh kelipatan 16 byte)
def pad(data):
    return data + (16 - len(data) % 16) * chr(16 - len(data) % 16)

def unpad(data):
    return data[:-ord(data[-1])]

# 🔒 Enkripsi teks
def encrypt(text):
    text = pad(text)
    iv = get_random_bytes(16)  # inisialisasi vector
    cipher = AES.new(SECRET_KEY, AES.MODE_CBC, iv)
    encrypted = cipher.encrypt(text.encode())
    return base64.b64encode(iv + encrypted).decode()

# 🔓 Dekripsi teks
def decrypt(enc_text):
    data = base64.b64decode(enc_text)
    iv = data[:16]
    cipher = AES.new(SECRET_KEY, AES.MODE_CBC, iv)
    decrypted = cipher.decrypt(data[16:]).decode()
    return unpad(decrypted)

# -------------------------------
# Password Manager
# -------------------------------
def save_password(service, username, password):
    try:
        with open("passwords.json", "r") as f:
            vault = json.load(f)
    except FileNotFoundError:
 lemari besi = {}

 encrypted_pass = encrypt(password)
 vault[service] = {"username": nama pengguna, "password": encrypted_pass}

 dengan open("passwords.json", "w") sebagai f:
 json.dump(vault, f, indent=4)

def get_password(service):
 mencoba:
 dengan open("passwords.json", "r") sebagai f:
 vault = json.load(f)
 jika layanan di lemari besi:
 data = vault[service]
 decrypted_pass = decrypt(data["password"])
 data kembalikan["username"], decrypted_pass
 else:
 kembali Tidak ada
 kecuali FileNotFoundError:
 kembali Tidak ada

# -------------------------------
# Menu utama
# -------------------------------
def utama():
 print("=== 🔑 Password Manager dengan AES ===")

 sedangkan True:
 print("\n1. Sandi Simpan")
 print("2. Sandi ambil")
 print("3. Keluar")

 choice = input("Pilih menu: ")

 jika pilihan == "1":
 service = input("Nama layanan: ")
 username = input("Nama pengguna: ")
 password = getpass.getpass("Password: ")
 save_password(layanan, nama pengguna, kata sandi)
 print("✅ Password berhasil disimpan terenkripsi.")

 pilihan elif == "2":
 service = input("Nama layanan: ")
 hasil = get_password(service)
 jika hasil:
 nama pengguna, kata sandi = hasil
 print(f"🔓 Username: {username}")
 print(f"🔓 Sandi: {sandi}")
 else:
 print("❌ Data tidak ditemuk.")

 pilihan elif == "3":
 print("Selesai, keluar dari program.")
 break

 else:
 print("Pilihan tidak valid.")

jika __nama__ == "__main__":
 utama()
